[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-epw-workflows"
dynamic = ["version"]
description = "AiiDA plugin package with experimental work chains for EPW software."
authors = [{name = "Yiming Zhang", email = "yiming.zhang@uclouvain.be"}]

readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.7"
dependencies = [
    "aiida-core~=2.5",
    "aiida-wannier90-workflows~=2.2",
    "aiida-quantumespresso~=4.11",
    "importlib_resources",
    "PyYAML",
]

[project.urls]
Source = "https://github.com/ymzhang0/aiida-supercon"

[project.optional-dependencies]

# Group for documentation-specific dependencies
docs = [
    "myst-parser",
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-book-theme",
]

# Group for testing-specific dependencies
tests = [
    "pytest",
    "pytest-regressions",
]

# The 'dev' group is now a convenient bundle of other groups for local setup
dev = [
    # Docs dependencies
    "myst-parser",
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-book-theme",
    # Tests dependencies
    "pytest",
    "pytest-regressions",
    # Other dev tools
    "pylint",
    "pre-commit",
]

[project.entry-points."aiida.data"]

[project.entry-points."aiida.calculations"]
'epw.epw' = 'aiida_epw_workflows.calculations.epw:EpwCalculation'

[project.entry-points."aiida.parsers"]
'epw.base' = 'aiida_epw_workflows.parsers.epw:EpwParser'

[project.entry-points."aiida.cmdline.data"]

[project.entry-points.'aiida.workflows']
'epw.base' = 'aiida_epw_workflows.workflows.base:EpwBaseWorkChain'
'epw.intp' = 'aiida_epw_workflows.workflows.intp:EpwIntpWorkChain'
'epw.bands' = 'aiida_epw_workflows.workflows.bands:EpwBandsWorkChain'
'epw.a2f' = 'aiida_epw_workflows.workflows.a2f:EpwA2fWorkChain'
'epw.iso' = 'aiida_epw_workflows.workflows.iso:EpwIsoWorkChain'
'epw.aniso' = 'aiida_epw_workflows.workflows.aniso:EpwAnisoWorkChain'
'epw.supercon' = 'aiida_epw_workflows.workflows.supercon:EpwSuperConWorkChain'
'epw.transport' = 'aiida_epw_workflows.workflows.transport:EpwTransportWorkChain'

[tool.flit.module]
name = "aiida_epw_workflows"

[tool.pylint.format]
max-line-length = 125

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    # black compatibility
    "C0330",
    "C0326",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:django:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_epw_workflows"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
line_length = 120
force_sort_within_sections = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIIDA', 'FIRSTPARTY', 'LOCALFOLDER']
known_aiida = ['aiida']

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38

[testenv]
usedevelop=True

[testenv:py{37,38,39,310}]
description = Run the test suite against a python version
extras = testing
commands = pytest {posargs}

[testenv:pre-commit]
description = Run the pre-commit checks
extras = pre-commit
commands = pre-commit run {posargs}

[testenv:docs]
description = Build the documentation
extras = docs
commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
"""
